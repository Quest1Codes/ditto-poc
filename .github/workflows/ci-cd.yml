name: Ditto Auth Webhook - CI/CD Pipeline

on:
  push:
    branches:
      - main
      - gateway-ui

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write

env:
  ECR_REPOSITORY_NAME: "ditto-auth"
  IMAGE_NAME: "ditto-auth-webhook"

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Image to ECR
        working-directory: ./auth-webhook
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG .
          
          # Push the image to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG
          
          # Also tag as 'latest' for easy pulling in the deploy step
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_NAME:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:latest

  deploy:
    name: Deploy to EC2
    runs-on: self-hosted
    needs: build 
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull Latest Image from ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY_NAME:latest

      - name: Create .env file for Docker Compose
          # This step runs inside the auth-webhook directory
        working-directory: ./auth-webhook
        run: |
            # Create the .env file and populate it with the secret from GitHub Actions
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" > .env
            echo ".env file created successfully."

      - name: Deploy with Docker Compose
        working-directory: ./auth-webhook
        env:
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        run: |
          # The docker-compose.yml file should be in your repository
          # This command will stop the existing container, pull the new image,
          # and start a new container with the updated image.
          docker-compose up -d --force-recreate